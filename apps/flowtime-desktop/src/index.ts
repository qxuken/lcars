import { app, BrowserWindow, ipcMain, IpcMainEvent, Menu, nativeImage, Tray } from 'electron';
import { join } from 'path';
import isDev from 'electron-is-dev';
import { Maybe } from 'monet';

let tray: Maybe<Tray>;

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}
function minimizeWindow(event: IpcMainEvent) {
  const webContents = event.sender;
  const win = BrowserWindow.fromWebContents(webContents);
  win.minimize();
}

function closeWindow(event: IpcMainEvent) {
  const webContents = event.sender;
  const win = BrowserWindow.fromWebContents(webContents);
  win.close();
}

function setSize(event: IpcMainEvent, { width, height }: { width: number; height: number }) {
  const webContents = event.sender;
  const win = BrowserWindow.fromWebContents(webContents);
  win.setSize(width, height);
}

function setPin(event: IpcMainEvent, shouldPin: boolean) {
  const webContents = event.sender;
  const win = BrowserWindow.fromWebContents(webContents);
  if (shouldPin) {
    win.setAlwaysOnTop(true, 'floating');
    if (process.platform === 'darwin') {
      win.setVisibleOnAllWorkspaces(true, {
        visibleOnFullScreen: true,
      });
    }
  } else {
    win.setAlwaysOnTop(false);
    if (process.platform === 'darwin') {
      win.setVisibleOnAllWorkspaces(false);
    }
  }
}

function connectListeners() {
  ipcMain.on('minimizeWindow', minimizeWindow);
  ipcMain.on('closeWindow', closeWindow);
  ipcMain.on('setSize', setSize);
  ipcMain.on('setPin', setPin);
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    title: 'Flowtime',
    height: 226,
    width: 747,
    resizable: false,
    minimizable: true,
    maximizable: false,
    fullscreenable: false,
    frame: false,
    darkTheme: true,
    transparent: true,
    hasShadow: false,
    icon: nativeImage.createFromPath(join(__dirname, './icon/ICON.png')),
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (isDev) {
    mainWindow.webContents.openDevTools();
  }
};

function loadApp() {
  createWindow();
  connectListeners();

  tray = Maybe.Some(new Tray(join(__dirname, './icon/ICON.png')));
  tray.map((tray) => {
    tray.setTitle('Flowtime');
    tray.setContextMenu(Menu.buildFromTemplate([{ label: 'Quit', click: () => app.quit() }]));
    tray.on('click', () => {
      const mainWindow = BrowserWindow.getAllWindows()[0];
      if (mainWindow) {
        mainWindow.show();
      } else {
        createWindow();
      }
    });
    return tray;
  });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', loadApp);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
